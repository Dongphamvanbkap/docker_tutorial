Docker basic commands:
    docker --version
    docker run hello-world
    docker images
    docker pull ubuntu
    docker run -it -d ubuntu
    docker ps -a
    docker exec -it <container_id> bash
    exit
    docker stop <container_id>
    docker commit <container_id> dongphamvan/ubuntu
    docker login
    docker push dongphamvan/ubuntu
    docker rm <container_id>
    docker rmi <image_id>

    Commands:
      attach      Attach local standard input, output, and error streams to a running container
      build       Build an image from a Dockerfile
      commit      Create a new image from a container's changes
      cp          Copy files/folders between a container and the local filesystem
      create      Create a new container
      diff        Inspect changes to files or directories on a container's filesystem
      events      Get real time events from the server
      exec        Run a command in a running container
      export      Export a container's filesystem as a tar archive
      history     Show the history of an image
      images      List images
      import      Import the contents from a tarball to create a filesystem image
      info        Display system-wide information
      inspect     Return low-level information on Docker objects
      kill        Kill one or more running containers
      load        Load an image from a tar archive or STDIN
      login       Log in to a Docker registry
      logout      Log out from a Docker registry
      logs        Fetch the logs of a container
      pause       Pause all processes within one or more containers
      port        List port mappings or a specific mapping for the container
      ps          List containers
      pull        Pull an image or a repository from a registry
      push        Push an image or a repository to a registry
      rename      Rename a container
      restart     Restart one or more containers
      rm          Remove one or more containers
      rmi         Remove one or more images
      run         Run a command in a new container
      save        Save one or more images to a tar archive (streamed to STDOUT by default)
      search      Search the Docker Hub for images
      start       Start one or more stopped containers
      stats       Display a live stream of container(s) resource usage statistics
      stop        Stop one or more running containers
      tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
      top         Display the running processes of a container
      unpause     Unpause all processes within one or more containers
      update      Update configuration of one or more containers
      version     Show the Docker version information
      wait        Block until one or more containers stop, then print their exit codes


DockerFile commands:
    #Usage: FROM [image_name]
    FROM ubuntu

    #Usage:RUN [command]
    RUN apt-get install -y riak

    #Usage: CMD application "argument", "argument", ...
    CMD "echo" "Welcome to First Lesson"

    #Usage: ENTRYPOINT application "argument", "argument", ...
    ENTRYPOINT echo

    #Usage: ADD [source directory or URL] [destination directory]
    ADD /my_app_folder/my_app_folder

    #Usage: ENV key value
    ENV SERVER_WORKS 4

    #Usage:
    WORKDIR /path WORKDIR ~/

    #Usage: EXPORT [port]
    EXPORT 8080

    #Usage: MAINTAINER [name]
    MAINTAINER authors_name

    #Usage: USER [uid]
    USER 751

    #Usage: VOLUME ["dir_1", "dir_2",]
    VOLUME ["/my_files"]

Creating an Image to Install Apache Web Server:
#Dockerfile:
FROM ubuntu:12.04

RUN apt-get update
RUN apt-get install -y apache2

ENV APACHE_RUN_USER www-data
ENV APACHE_RUN_GROUP www-data
ENV APACHE_LOG_DIR /var/log/apache2

RUN echo 'Hello, docker' > /var/www/index.html

ENTRYPOINT ["/usr/sbin/apache2"]
CMD ["-D", "FOREGROUND"]


    docker build -t <image_name> .
    docker run -p 80:80 --name=App1 <image_name>





